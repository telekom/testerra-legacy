<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="" lang="">
<head>
    <title>$tabName</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
    <meta name="description" content="Results of Page Measurements."/>

    #parse("styleincludes.vm")
    #parse("scriptincludes.vm")
</head>
<body>

#set($tabcontext = "$tabId")
#set($pagetitle = "$tabName")
#parse("header.vm")

<table class="standardTable" width="100%">
    <tr>
        <th colspan="9" class="header suite">
            <div class="suiteLinks"></div>
            <h5>$tabName</h5>
        </th>
    </tr>
    <tr>
        <td>

            <canvas id="bars" style="padding:20px; width:100%; height: 500px;"></canvas>
            <canvas id="points" style="padding:20px; width:100%; height: 500px;"></canvas>

            <script>

function getInt() {
    var bottom = 50;
    var top = 205;
    return (Math.random() * (top - bottom) + bottom) | 0;
}
function genColor() {
    var alpha = 0.5;
    return 'rgba(' + getInt() + ',' + getInt() + ',' + getInt() + ',' + alpha + ')';
}

var radius = 10;

var colors = new Array();
#foreach($actionName in $avgPerActions.keySet())
colors.push(genColor());
#end

function drawBars() {

    var categories = [
        #foreach($actionName in $avgPerActions.keySet())
           '$actionName',
        #end
    ];

    var data = {
        labels: categories,
        datasets: [
            {
                label: 'Min',
                backgroundColor: 'rgba(0, 0, 0, 0)', // don't show really
                data: [
                    #foreach($actionName in $avgPerActions.keySet())
                    $minPerActions.get($actionName),
                    #end
                ]
            },
            {
                label: 'Range',
                backgroundColor: colors,
                data: [
                    #foreach($actionName in $avgPerActions.keySet())
                    ($maxPerActions.get($actionName) - $minPerActions.get($actionName)),
                    #end
                ]
            },

            // points:
            {
                label: 'Avg',
                type: 'line',
                backgroundColor: colors,
                fill: false,
                showLine: false,
                pointRadius: radius,
                pointHoverRadius: radius + 5,
                data: [
                    #foreach($actionName in $avgPerActions.keySet())
                    $avgPerActions.get($actionName),
                    #end
                ]
            }

        ]
    };

    var options = {
        title: {
            display: true,
            text: 'Min/Avg/Max per Action Type'
        },
        tooltips: {
            position: 'average'
        },
        legend: {
            display: false
        },
        scales: {
            xAxes: [{
                stacked: true
            }],
            yAxes: [{
                stacked: true,
                ticks: {
                    beginAtZero: true,
                    callback: function(value) {
                        return msToFormattedString(value, false);
                    }
                }
            }]
        },
        tooltips: {
          callbacks: {

            title: function(tooltipItem, data) {
              return data['labels'][tooltipItem[0]['index']];
            },

            label: function(tooltipItem, data) {
              var cat = tooltipItem['index'];
              var min = data['datasets'][0]['data'][cat];
              var max = data['datasets'][1]['data'][cat] + min;
              var avg = data['datasets'][2]['data'][cat];

              var minS = msToFormattedString(min, false);
              var maxS = msToFormattedString(max, false);
              var avgS = msToFormattedString(avg, false);
              return ["Min: " + minS, "Avg: " + avgS, "Max: " + maxS];
            }

          }
        }
    };

    var canvas = $("#bars");

    var chart = new Chart(canvas, {
        type: 'bar',
        data: data,
        options: options
    });

}

drawBars();
            </script>
            <script>
function drawPoints() {

    var categories = [
        #foreach($actionName in $avgPerActions.keySet())
           '$actionName',
        #end
    ];

    var data = {
        datasets: [
            #set ($i = 0)
            #foreach ($actionName in $allActions.keySet())
            #set($timingInfos = $allActions.get($actionName))
            {
                label: categories[$i],
                backgroundColor: colors[$i],
                fill: false,
                showLine: false,
                pointRadius: radius,
                pointHoverRadius: radius + 5,
                data: [
                    #foreach ($PLI in $timingInfos)
                    {
                    x: moment($PLI.getTimeStamp()),
                    y: $PLI.getLoadDuration()
                    },
                    #end

                ]
            },
            #set ($i = $i + 1)
            #end
        ]
    };

    var options = {
        title: {
            display: true,
            text: 'Values per Action Type'
        },
        tooltips: {
            position: 'average'
        },
        legend: {
            display: true
        },
        hover: {
            mode: 'new mode'
        },
        tooltips: {
          callbacks: {

            title: function(tooltipItem, data) {
              return categories[tooltipItem[0].datasetIndex];
            },

            label: function(tooltipItem, data) {
              var valueS = msToFormattedString(tooltipItem.yLabel, false);
              return valueS;
            }

          }
        },
        scales: {
            xAxes: [{
                type: 'time',
                time: {
                    unit: 'second'
                }
            }],
            yAxes: [{
                ticks: {
                    beginAtZero: true,
                    callback: function(value) {
                        return msToFormattedString(value, false);
                    }
                }
            }]
        }

    };

    var canvas = $("#points");

    var chart = new Chart(canvas, {
        type: 'line',
        data: data,
        options: options
    });

}

drawPoints();
            </script>
        </td>
    </tr>
</table>
</body>

</html>