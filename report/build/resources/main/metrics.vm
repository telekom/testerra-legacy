<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="" lang="">
    <head>
        <title>Test Metrics</title>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>

        #parse("styleincludes.vm")
        #parse("scriptincludes.vm")

    <body>

        #set($metricsActive = "true")
        #set($tabcontext = "m")
        #set($pagetitle = "Metrics")
        #parse("header.vm")

        <table class="metricstable">

            <tr>
                <th colspan="3" class="header suite">
                    <div class="suiteLinks"></div>
                    <h5>Metrics Analysis</h5>
                </th>
            </tr>

            <tr colspan="3" style="border: solid; border-width: 10px;"></tr>

            <tr class="metricstr">

                <td class="metricstd">
                    <div class="chartMid" style="top: 40px;">
                        <img src="$metrics.getTrafficLight()" alt="Traffic Light" width="70px"/>
                    </div>

                    <div class="descriptionText">Status</div>
                </td>

                <td class="metricstd">
                    <div id="getLinesOfCodePerClass" class="metricstile chartMid"></div>

                    <div class="descriptionText">LOC (Lines Of Code) pro Klasse</div>
                </td>

                <td class="metricstd">
                    <div id="getCommentLinesToLOCRatio" class="metricstile chartMid"></div>

                    <div class="descriptionText">Comment Lines zu LOC (Lines Of Code)</div>
                </td>

            </tr>

            <tr colspan="3" style="border: solid; border-width: 10px;"></tr>

#if ($dryrun)
            <tr>
                <td>
                    DryRun active: no more information available.
                </td>
            </tr>
#else
            <tr class="metricstr">

                <td class="metricstd clickable" onclick="showDialog('DetailsPageMethodsReturningVoidList');">

                    <div id="getPageMethodsReturningVoid" class="chartMidText"></div>

                    <div class="descriptionText">
                        Pages mit public void Methoden
                        <br><br> Klick f&uuml;r mehr Details.
                    </div>
                </td>


                <td class="metricstd clickable" onclick="showDialog('DetailsPagesWithoutCheckPageErrros');">

                    <div id="getPagesWithoutCheckPage" class="chartMidText"></div>

                    <div class="descriptionText">
                        Pages ohne checkPage()
                        <br><br> Klick f&uuml;r mehr Details.
                    </div>

                </td>

                <td class="metricstd clickable" onclick="showDialog('DetailsPagesWithoutElementChecksErros');">

                    <div id="getPagesWithoutElementChecks" class="chartMidText"></div>

                    <div class="descriptionText">
                        Pages ohne @Check-Elemente
                        <br><br> Klick f&uuml;r mehr Details.
                    </div>

                </td>

            </tr>

            <tr colspan="3" style="border: solid; border-width: 10px;"></tr>

            <tr class="metricstr">

                <td class="metricstd clickable" onclick="showDialog('DetailsUndescriptedAssertCallersByMethod');">

                    <!-- It is the same data source and so the same popup. -->
                        <div id="getOverallUndescriptedAssertCalls" class="chartMidText"></div>

                        <div class="descriptionText">
                            Asserts ohne Description
                            <br><br> Klick f&uuml;r mehr Details.
                        </div>

                </td>

                <td class="metricstd clickable" onclick="showDialog('DetailsUndescriptedAssertCallersByMethod');">

                        <div id="getTestMethodsWithUndescriptedAsserts" class="chartMidText"></div>

                        <div class="descriptionText">
                            Tests mit Asserts ohne Description
                            <br><br> Klick f&uuml;r mehr Details.
                        </div>

                </td>

                <td class="metricstd clickable" onclick="showDialog('DetailsNoAssertsByMethod');">

                        <div id="getTestMethodsWithoutAssert" class="chartMidText"></div>

                        <div class="descriptionText">
                            Tests ohne Asserts
                            <br><br> Klick f&uuml;r mehr Details.
                        </div>

                </td>

            </tr>
#end
        </table>


        #parse("metricsPopup.vm")

<script type="text/javascript">

    function showDialog(id) {
        $('body').css('overflow-x', 'hidden');
        $('body').css('overflow-y', 'hidden');
        $('#' + id).dialog({
            width: "80%", modal: true
        });
    }
</script>

<script type="text/javascript">
function drawGauge(id, name, value, valueSuffix, yMin, yMax, lowerActionLimit, lowerWarningLimit, upperWarningLimit, upperActionLimit) {

    var ry = value;
    var y = value;
    if (value > yMax) {
        y = yMax;
    }

    $('#' + id).highcharts({

        chart: {
            type: 'gauge',
            backgroundColor: '#F6F5F5',
            plotBorderWidth: 0,
            plotShadow: false
        },
        credits: {
            enabled: false
        },
        legend: {
            enabled: false
        },
        exporting: { enabled: false },

        title: {
            text: ''
        },
        pane: {
            startAngle: -150,
            endAngle: 150,
            background: [{
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                    stops: [
                        [0, '#FFF'],
                        [1, '#333']
                    ]
                },
                borderWidth: 0,
                outerRadius: '109%'
            }, {
                backgroundColor: {
                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                    stops: [
                        [0, '#333'],
                        [1, '#FFF']
                    ]
                },
                borderWidth: 1,
                outerRadius: '107%'
            }, {
                // default background
            }, {
                backgroundColor: '#DDD',
                borderWidth: 0,
                outerRadius: '105%',
                innerRadius: '103%'
            }]
        },

        // the value axis
        yAxis: {
            min: yMin,
            max: yMax,

            minorTickInterval: 'auto',
            minorTickWidth: 1,
            minorTickLength: 10,
            minorTickPosition: 'inside',
            minorTickColor: '#666',

            tickPixelInterval: 30,
            tickWidth: 2,
            tickPosition: 'inside',
            tickLength: 10,
            tickColor: '#666',
            labels: {
                step: 2,
                rotation: 'auto'
            },
            title: {
                text: ''
            },
            plotBands: [
            {
                from: yMin,
                to: lowerActionLimit,
                color: 'red'
            }, {
                from: lowerActionLimit,
                to: lowerWarningLimit,
                color: 'orange'
            }, {
                from: lowerWarningLimit,
                to: upperWarningLimit,
                color: 'green' // green
            }, {
                from: upperWarningLimit,
                to: upperActionLimit,
                color: 'orange' // yellow
            }, {
                from: upperActionLimit,
                to: yMax,
                color: 'red' // red
            }
            ]
        },

        series: [{
            name: name,
            data: [value],
            tooltip: {
                valueSuffix: valueSuffix
            },
            dataLabels: {
                formatter: function () {
                    if(this.point.realy)
                        return this.point.realy;
                    else
                        return this.y;
                }
            }
            }],

    },

    // limit
    function (chart) {
            var point = chart.series[0].points[0];
            point.update({
                realy: ry,
                y: y
            });
    }
    );
}
</script>

<!--

        var linesOfCodePerClassGauge = new GaugeSVG({
            id: "getLinesOfCodePerClass",
            value: $metrics.getLinesOfCodePerClass(),
            min: 0,
            max: 800,
            title: "Lines Of Code Per Class",
            lowerActionLimit: $metrics.getLinesOfCodePerClassLowerRed(),
            lowerWarningLimit: $metrics.getLinesOfCodePerClassLowerYellow(),
            upperWarningLimit: $metrics.getLinesOfCodePerClassUpperRed(),
            upperActionLimit: $metrics.getLinesOfCodePerClassUpperYellow(),
        });

-->
<script type="text/javascript">
    window.onload = function(){

        drawGauge("getLinesOfCodePerClass", "Lines Of Code Per Class", $metrics.getLinesOfCodePerClass(), "",
            0, 800,
            $metrics.getLinesOfCodePerClassLowerRed(),
            $metrics.getLinesOfCodePerClassLowerYellow(),
            $metrics.getLinesOfCodePerClassUpperYellow(),
            $metrics.getLinesOfCodePerClassUpperRed()
        );

        drawGauge("getCommentLinesToLOCRatio", "Comment Lines To Lines Of Code Ratio", $metrics.getCommentLinesToLOCRatio(), "%",
            0, 100,
            $metrics.getCommentLinesToLOCRatioLowerRed(),
            $metrics.getCommentLinesToLOCRatioLowerYellow(),
            $metrics.getCommentLinesToLOCRatioUpperYellow(),
            $metrics.getCommentLinesToLOCRatioUpperRed()
        );

        drawNumber("getPageMethodsReturningVoid", $metrics.getPageMethodsReturningVoid());

        drawNumber("getPagesWithoutCheckPage", $metrics.getPagesWithoutCheckPage());

        drawNumber("getPagesWithoutElementChecks", $metrics.getPagesWithoutElementChecks());

        drawNumber("getTestMethodsWithoutAssert", $metrics.getTestMethodsWithoutAssert());

        drawNumber("getTestMethodsWithUndescriptedAsserts", $metrics.getTestMethodsWithUndescriptedAsserts());

        drawNumber("getOverallUndescriptedAssertCalls", $metrics.getOverallUndescriptedAssertCalls());

    };
</script>

<script type="text/javascript">
function drawNumber(id, value) {
    var color = "green";
    if (value > 0) {
        color = "red";
    }

    $('#' + id).html('<div style="color: ' + color + '; font-size: 85px;">' + value + '</div>');
}
</script>
</body>



</html>